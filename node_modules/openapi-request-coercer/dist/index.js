"use strict";
exports.__esModule = true;
var OpenAPIRequestCoercer = /** @class */ (function () {
    function OpenAPIRequestCoercer(args) {
        var loggingKey = args && args.loggingKey ?
            args.loggingKey + ": " :
            '';
        if (!args) {
            throw new Error(loggingKey + "missing args argument");
        }
        if (!Array.isArray(args.parameters)) {
            throw new Error(loggingKey + "args.parameters must be an Array");
        }
        var extensionBase = args && args.extensionBase ?
            args.extensionBase :
            'x-openapi-coercion';
        var strictExtensionName = extensionBase + "-strict";
        var enableObjectCoercion = !!args.enableObjectCoercion;
        this.coerceHeaders = buildCoercer({
            params: args.parameters,
            property: 'header',
            isHeaders: true,
            loggingKey: loggingKey,
            strictExtensionName: strictExtensionName,
            enableObjectCoercion: enableObjectCoercion
        });
        this.coerceParams = buildCoercer({
            params: args.parameters,
            property: 'path',
            isHeaders: false,
            loggingKey: loggingKey,
            strictExtensionName: strictExtensionName,
            enableObjectCoercion: enableObjectCoercion
        });
        this.coerceQuery = buildCoercer({
            params: args.parameters,
            property: 'query',
            isHeaders: false,
            loggingKey: loggingKey,
            strictExtensionName: strictExtensionName,
            enableObjectCoercion: enableObjectCoercion
        });
        this.coerceFormData = buildCoercer({
            params: args.parameters,
            property: 'formData',
            isHeaders: false,
            loggingKey: loggingKey,
            strictExtensionName: strictExtensionName,
            enableObjectCoercion: enableObjectCoercion
        });
    }
    OpenAPIRequestCoercer.prototype.coerce = function (request) {
        if (request.headers && this.coerceHeaders) {
            this.coerceHeaders(request.headers);
        }
        if (request.params && this.coerceParams) {
            this.coerceParams(request.params);
        }
        if (request.query && this.coerceQuery) {
            this.coerceQuery(request.query);
        }
        if (request.body && this.coerceFormData) {
            this.coerceFormData(request.body);
        }
    };
    return OpenAPIRequestCoercer;
}());
exports["default"] = OpenAPIRequestCoercer;
var OBJECT_FORMAT_COERCER = {
    "default": function (input) { return JSON.parse(input); }
    //other formats
};
var COERCION_STRATEGIES = {
    array: function (itemCoercer, collectionFormat, input) {
        if (!Array.isArray(input)) {
            var sep = pathsep(collectionFormat || 'csv');
            input = input.split(sep);
        }
        input.forEach(function (v, i) {
            input[i] = itemCoercer(v);
        });
        return input;
    },
    object: function (format, input) {
        return (OBJECT_FORMAT_COERCER[format] || OBJECT_FORMAT_COERCER['default'])(input);
    },
    boolean: function (input) {
        if (typeof input === 'boolean') {
            return input;
        }
        if (input === 'false') {
            return false;
        }
        else {
            return true;
        }
    },
    integer: function (input) { return Math.floor(Number(input)); },
    number: function (input) { return Number(input); },
    string: function (input) { return String(input); }
};
var STRICT_COERCION_STRATEGIES = {
    boolean: function (input) {
        if (typeof input === 'boolean') {
            return input;
        }
        if (input.toLowerCase() === 'false') {
            return false;
        }
        else if (input.toLowerCase() === 'true') {
            return true;
        }
        else {
            return null;
        }
    }
};
function buildCoercer(args) {
    var l = args.isHeaders ?
        function (name) {
            return name.toLowerCase();
        } :
        function (name) {
            return name;
        };
    var coercion;
    if (args.params.length) {
        var coercers_1 = {};
        args.params.filter(byLocation(args.property)).forEach(function (param) {
            var name = param.name;
            var type = param.type;
            var strict = !!param[args.strictExtensionName];
            var coercer;
            var itemCoercer;
            if (type === 'array') {
                var disableCoercer = void 0;
                if (!param.items) {
                    throw new Error(args.loggingKey + "items is a required property with type array");
                }
                if (param.items.type === 'array') {
                    throw new Error(args.loggingKey + "nested arrays are not allowed (items was of type array)");
                }
                itemCoercer = getCoercer(param.items.type, strict);
                if (param.items.type === 'object') {
                    if (!args.enableObjectCoercion) {
                        disableCoercer = true;
                    }
                    else {
                        itemCoercer = itemCoercer.bind(null, param.items.format);
                    }
                }
                if (!disableCoercer) {
                    coercer = COERCION_STRATEGIES.array.bind(null, itemCoercer, param.collectionFormat);
                }
            }
            else if (type === 'object') {
                if (args.enableObjectCoercion) {
                    coercer = getCoercer(param.type, strict).bind(null, param.format);
                }
            }
            else {
                coercer = getCoercer(param.type, strict);
            }
            if (coercer) {
                coercers_1[l(name)] = coercer;
            }
        });
        coercion = function (obj) {
            for (var paramName in obj) {
                if (paramName in coercers_1) {
                    obj[paramName] = coercers_1[paramName](obj[paramName]);
                }
            }
        };
    }
    return coercion;
}
function byLocation(location) {
    return function (param) { return param["in"] === location; };
}
function getCoercer(type, strict) {
    var strategy;
    if (strict) {
        strategy = STRICT_COERCION_STRATEGIES[type];
    }
    if (!strategy) {
        strategy = COERCION_STRATEGIES[type];
    }
    return strategy;
}
function pathsep(format) {
    switch (format) {
        case 'csv':
            return ',';
        case 'ssv':
            return ' ';
        case 'tsv':
            return '\t';
        case 'pipes':
            return '|';
    }
}
//# sourceMappingURL=index.js.map