import { OpenAPI, IJsonSchema } from 'openapi-types';
import * as Ajv from 'ajv';
export interface IOpenAPIRequestValidator {
    validate(request: OpenAPI.Request): any;
}
export interface OpenAPIRequestValidatorArgs {
    customFormats?: {
        [formatName: string]: Ajv.FormatValidator | Ajv.FormatDefinition;
    };
    errorTransformer?(openAPIResponseValidatorValidationError: OpenAPIRequestValidatorError, ajvError: Ajv.ErrorObject): any;
    externalSchemas?: {
        [index: string]: IJsonSchema;
    };
    loggingKey?: string;
    parameters: OpenAPI.Parameters;
    schemas?: Array<IJsonSchema>;
}
export interface OpenAPIRequestValidatorError {
    errorCode: string;
    location?: string;
    message: string;
    path?: string;
    schema?: any;
}
export default class OpenAPIRequestValidator implements IOpenAPIRequestValidator {
    private bodySchema;
    private errorMapper;
    private isBodyRequired;
    private validateBody;
    private validateFormData;
    private validateHeaders;
    private validatePath;
    private validateQuery;
    constructor(args: OpenAPIRequestValidatorArgs);
    validate(request: any): any;
}
