import * as Ajv from 'ajv';
import { OpenAPIV2, OpenAPIV3, IJsonSchema } from 'openapi-types';
export interface IOpenAPIResponseValidator {
    validateResponse(statusCode: string, response: any): void | OpenAPIResponseValidatorValidationError;
}
export interface OpenAPIResponseValidatorArgs {
    customFormats: {
        [formatName: string]: Ajv.FormatValidator | Ajv.FormatDefinition;
    };
    definitions: {
        [definitionName: string]: IJsonSchema;
    };
    errorTransformer?(openAPIResponseValidatorValidationError: OpenAPIResponseValidatorError, ajvError: Ajv.ErrorObject): any;
    externalSchemas: {
        [index: string]: IJsonSchema;
    };
    loggingKey: string;
    responses: {
        [responseCode: string]: {
            schema: OpenAPIV2.Schema | OpenAPIV3.SchemaObject;
        };
    };
}
export interface OpenAPIResponseValidatorError {
    path?: string;
    errorCode: string;
    message: string;
}
export interface OpenAPIResponseValidatorValidationError {
    message: string;
    errors?: Array<any>;
}
export default class OpenAPIResponseValidator implements IOpenAPIResponseValidator {
    private errorMapper;
    private validators;
    constructor(args: OpenAPIResponseValidatorArgs);
    validateResponse(statusCode: any, response: any): {
        message: string;
        errors?: undefined;
    } | {
        message: string;
        errors: any;
    };
}
